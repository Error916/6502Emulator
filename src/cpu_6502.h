#include <stdint.h>
#include <string.h>
#include <assert.h>

typedef struct {
	uint8_t register_a;
	uint8_t register_x;
	uint8_t register_y;
	uint8_t status;
	uint16_t program_counter;
	uint8_t memory[0xFFFF];
} CPU;

typedef enum {
	Immediate,
	ZeroPage,
	ZeroPage_X,
	ZeroPage_Y,
	Absolute,
	Absolute_X,
	Absolute_Y,
	Indirect_X,
	Indirect_Y,
	NoneAddressing,
} AddressingMode;

typedef struct {
	const uint8_t code;
	const char mnemonic[3];
	const uint8_t len;
	const uint8_t cycles;
	const AddressingMode mode;
} OPCODE;

void createCPU(CPU *cpu);
void destroyCPU(CPU *cpu);

uint8_t mem_read(CPU *cpu, uint16_t add);
uint16_t mem_read_u16(CPU *cpu, uint16_t add);
void mem_write(CPU *cpu, uint16_t add, uint8_t data);
void mem_write_u16(CPU *cpu, uint16_t add, uint16_t data);

uint16_t get_operand_address(CPU *cpu, AddressingMode mode);

void load_and_run(CPU *cpu, uint8_t *program, size_t len);
void load(CPU *cpu, uint8_t *program, size_t len);
void reset(CPU *cpu);
void run(CPU *cpu);

void update_zero_and_negative_flag(CPU *cpu, uint8_t res);
void lda(CPU *cpu, AddressingMode mode);
void sta(CPU *cpu, AddressingMode mode);
void tax(CPU *cpu);
void inx(CPU *cpu);

static const OPCODE opcode_lookup_table[256] = {
	{ 0x00, "BRK", 1, 7, NoneAddressing },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0x81, "STA", 2, 6, Indirect_X },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0x85, "STA", 2, 3, ZeroPage },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0x8D, "STA", 3, 4, Absolute },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0x91, "STA", 2, 6, Indirect_Y },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0x95, "STA", 2, 4, ZeroPage_X },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0x99, "STA", 3, 5, Absolute_Y },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0x9D, "STA", 3, 5, Absolute_X },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0xA1, "LDA", 2, 6, Indirect_X},
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0xA5, "LDA", 2, 3, ZeroPage },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0xA9, "LDA", 2, 2, Immediate },
	{ 0xAA, "TAX", 1, 2, NoneAddressing },
	{ 0 },
	{ 0 },
	{ 0xAD, "LDA", 3, 4, Absolute },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0xB1, "LDA", 2, 5 /* +1 if page crossed */, Indirect_Y },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0xB5, "LDA", 2, 4, ZeroPage_X },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0xB9, "LDA", 3, 4 /* +1 if page crossed */, Absolute_Y },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0xBD, "LDA", 3, 4 /* +1 if page crossed */, Absolute_X },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0xE8, "INX", 1, 2, NoneAddressing },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
	{ 0 },
};
